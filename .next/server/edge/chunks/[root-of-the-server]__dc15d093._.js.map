{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse, type NextRequest } from \"next/server\";\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request);\n}\n\nexport const config = {\n  matcher: [\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n};\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  });\nconsole.log(\"middleware ran\");\n//   const supabase = createServerClient(\n//     process.env.SUPABASE_URL!,\n//     process.env.SUPABASE_ANON_KEY!,\n//     {\n//       cookies: {\n//         getAll() {\n//           return request.cookies.getAll();\n//         },\n//         setAll(cookiesToSet) {\n//           cookiesToSet.forEach(({ name, value }) =>\n//             request.cookies.set(name, value),\n//           );\n//           supabaseResponse = NextResponse.next({\n//             request,\n//           });\n//           cookiesToSet.forEach(({ name, value, options }) =>\n//             supabaseResponse.cookies.set(name, value, options),\n//           );\n//         },\n//       },\n//     },\n//   );\n\n//   const isAuthRoute =\n//     request.nextUrl.pathname === \"/login\" ||\n//     request.nextUrl.pathname === \"/sign-up\";\n\n//   if (isAuthRoute) {\n//     const {\n//       data: { user },\n//     } = await supabase.auth.getUser();\n//     if (user) {\n//       return NextResponse.redirect(\n//         new URL(\"/\", process.env.NEXT_PUBLIC_BASE_URL),\n//       );\n//     }\n//   }\n\n//   const { searchParams, pathname } = new URL(request.url);\n\n//   if (!searchParams.get(\"noteId\") && pathname === \"/\") {\n//     const {\n//       data: { user },\n//     } = await supabase.auth.getUser();\n\n//     if (user) {\n//       const { newestNoteId } = await fetch(\n//         `${process.env.NEXT_PUBLIC_BASE_URL}/api/fetch-newest-note?userId=${user.id}`,\n//       ).then((res) => res.json());\n\n//       if (newestNoteId) {\n//         const url = request.nextUrl.clone();\n//         url.searchParams.set(\"noteId\", newestNoteId);\n//         return NextResponse.redirect(url);\n//       } else {\n//         const { noteId } = await fetch(\n//           `${process.env.NEXT_PUBLIC_BASE_URL}/api/create-new-note?userId=${user.id}`,\n//           {\n//             method: \"POST\",\n//             headers: {\n//               \"Content-Type\": \"application/json\",\n//             },\n//           },\n//         ).then((res) => res.json());\n//         const url = request.nextUrl.clone();\n//         url.searchParams.set(\"noteId\", noteId);\n//         return NextResponse.redirect(url);\n//       }\n//     }\n//   }\n\n//   return supabaseResponse;\n}"],"names":[],"mappings":";;;;;AACA;AAAA;;AAEO,eAAe,WAAW,OAAoB;IACnD,OAAO,MAAM,cAAc;AAC7B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH;AAEO,eAAe,cAAc,OAAoB;IACtD,IAAI,mBAAmB,4TAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvC;IACF;IACF,QAAQ,GAAG,CAAC;AACZ,yCAAyC;AACzC,iCAAiC;AACjC,sCAAsC;AACtC,QAAQ;AACR,mBAAmB;AACnB,qBAAqB;AACrB,6CAA6C;AAC7C,aAAa;AACb,iCAAiC;AACjC,sDAAsD;AACtD,gDAAgD;AAChD,eAAe;AACf,mDAAmD;AACnD,uBAAuB;AACvB,gBAAgB;AAChB,+DAA+D;AAC/D,kEAAkE;AAClE,eAAe;AACf,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AAEP,wBAAwB;AACxB,+CAA+C;AAC/C,+CAA+C;AAE/C,uBAAuB;AACvB,cAAc;AACd,wBAAwB;AACxB,yCAAyC;AACzC,kBAAkB;AAClB,sCAAsC;AACtC,0DAA0D;AAC1D,WAAW;AACX,QAAQ;AACR,MAAM;AAEN,6DAA6D;AAE7D,2DAA2D;AAC3D,cAAc;AACd,wBAAwB;AACxB,yCAAyC;AAEzC,kBAAkB;AAClB,8CAA8C;AAC9C,yFAAyF;AACzF,qCAAqC;AAErC,4BAA4B;AAC5B,+CAA+C;AAC/C,wDAAwD;AACxD,6CAA6C;AAC7C,iBAAiB;AACjB,0CAA0C;AAC1C,yFAAyF;AACzF,cAAc;AACd,8BAA8B;AAC9B,yBAAyB;AACzB,oDAAoD;AACpD,iBAAiB;AACjB,eAAe;AACf,uCAAuC;AACvC,+CAA+C;AAC/C,kDAAkD;AAClD,6CAA6C;AAC7C,UAAU;AACV,QAAQ;AACR,MAAM;AAEN,6BAA6B;AAC7B"}}]
}